// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String?
  image     String?
  role      String    @default("user") // ✅ Can be "user" or "admin"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Vinyls    Vinyl[] // ✅ One admin can upload multiple vinyls
  Account   Account[]
  Session   Session[]
  Blog      Blog[]
  Order     Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vinyl {
  id      String  @id @default(uuid())
  title   String
  artist  String
  genre   String
  price   Float
  image   String?
  adminId String // ✅ Ensure this exists
  admin   User    @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String   @id @default(uuid())
  userId          String?  @map("user_id")
  items           Json
  total           Float
  paid            Boolean
  shipped         Boolean
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())

  name       String?
  street     String?
  city       String?
  postalCode String?
  country    String?

  email String?

  user User? @relation(fields: [userId], references: [id])
}
